{
  "name": "auto-git-message",
  "displayName": "Auto Git Message",
  "description": "AI-powered Git commit message generator supporting multiple AI providers (OpenAI, Anthropic, Google Gemini, Ollama, Groq)",
  "version": "0.2.0",
  "license": "MIT",
  "publisher": "bablilayoub",
  "engines": {
    "vscode": "^1.104.0"
  },
  "categories": [
    "SCM Providers",
    "Other"
  ],
  "keywords": [
    "git",
    "commit",
    "ai",
    "openai",
    "anthropic",
    "claude",
    "gemini",
    "ollama",
    "artificial intelligence",
    "conventional commits",
    "automation",
    "productivity",
    "free ai",
    "local ai"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/bablilayoub/auto-git-message.git"
  },
  "bugs": {
    "url": "https://github.com/bablilayoub/auto-git-message/issues"
  },
  "homepage": "https://github.com/bablilayoub/auto-git-message#readme",
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "commitAi.setApiKey",
        "title": "AI: Set API Key",
        "category": "Auto Git Message"
      },
      {
        "command": "commitAi.generateCommitMessage",
        "title": "AI: Generate Commit Message",
        "category": "Auto Git Message",
        "icon": "$(sparkle)"
      },
      {
        "command": "commitAi.selectModel",
        "title": "AI: Select Model",
        "category": "Auto Git Message",
        "icon": "$(settings-gear)"
      },
      {
        "command": "commitAi.clearApiKey",
        "title": "Manage API Key",
        "category": "Auto Git Message",
        "icon": "$(key)"
      },
      {
        "command": "commitAi.selectProfessionalism",
        "title": "Select Professionalism Level",
        "category": "Auto Git Message",
        "icon": "$(mortar-board)"
      },
      {
        "command": "commitAi.selectProvider",
        "title": "Select AI Provider",
        "category": "Auto Git Message",
        "icon": "$(cloud)"
      },
      {
        "command": "commitAi.showCommitHistory",
        "title": "AI: Show Commit History",
        "category": "Auto Git Message",
        "icon": "$(history)"
      },
      {
        "command": "commitAi.showFavoriteCommits",
        "title": "AI: Show Favorite Commits",
        "category": "Auto Git Message",
        "icon": "$(star)"
      },
      {
        "command": "commitAi.manageFavorites",
        "title": "AI: Manage History & Favorites",
        "category": "Auto Git Message",
        "icon": "$(settings)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "auto-git-message",
          "title": "Auto Git Message",
          "icon": "$(git-commit)"
        }
      ]
    },
    "views": {
      "auto-git-message": [
        {
          "id": "commitAi.aiCommitView",
          "name": "AI Commit Message",
          "when": "workbenchState != empty && config.commitAi.showActivityBar"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "commitAi.aiCommitView",
        "contents": "$(key) API Key Required\n\nChoose your AI provider and set up authentication to start generating commit messages.\n\n[$(cloud) Select AI Provider](command:commitAi.selectProvider)\n\n[$(key) Set API Key](command:commitAi.setApiKey)\n\n---\n\n$(info) Free Options Available:\n• Ollama (Local AI)\n• Google Gemini (Free tier)\n• Groq (Free tier)",
        "when": "workbenchState != empty && !commitAi.apiKeyConfigured"
      },
      {
        "view": "commitAi.aiCommitView",
        "contents": "$(rocket) AI Commit Generator\n\nGenerate intelligent commit messages from your staged Git changes.\n\n[$(sparkle) Generate Commit Message](command:commitAi.generateCommitMessage)\n\n---\n\n$(history) History & Favorites\n\n[$(history) Recent Messages](command:commitAi.showCommitHistory)\n\n[$(star) Favorite Messages](command:commitAi.showFavoriteCommits)\n\n[$(settings) Manage History & Favorites](command:commitAi.manageFavorites)\n\n---\n\n$(gear) Configuration\n\n[$(cloud) AI Provider](command:commitAi.selectProvider)\n\n[$(settings-gear) Select Model](command:commitAi.selectModel)\n\n[$(mortar-board) Professionalism Level](command:commitAi.selectProfessionalism)\n\n[$(key) Manage API Key](command:commitAi.clearApiKey)\n\n---\n\n$(checklist) Before generating:\n• Stage your changes (git add)\n• Ensure you're in a Git repository",
        "when": "workbenchState != empty && commitAi.apiKeyConfigured"
      }
    ],
    "configuration": {
      "title": "Auto Git Message",
      "properties": {
        "commitAi.provider": {
          "type": "string",
          "default": "openai",
          "description": "AI provider to use for generating commit messages",
          "enum": [
            "openai",
            "anthropic",
            "google",
            "ollama",
            "groq"
          ],
          "enumDescriptions": [
            "OpenAI (GPT models) - Paid API required",
            "Anthropic Claude - Paid API required",
            "Google Gemini - Free tier available",
            "Ollama - Free local AI models",
            "Groq - Fast inference with free tier"
          ]
        },
        "commitAi.model": {
          "type": "string",
          "default": "gpt-4o-mini",
          "description": "AI model to use (varies by provider)",
          "enum": [
            "gpt-4o-mini",
            "gpt-4o",
            "gpt-4-turbo",
            "gpt-3.5-turbo",
            "claude-3-haiku-20240307",
            "claude-3-sonnet-20240229",
            "gemini-1.5-flash",
            "gemini-1.5-pro",
            "llama3.1:8b",
            "llama3.1:70b",
            "codellama:7b",
            "mixtral:8x7b"
          ]
        },
        "commitAi.apiEndpoint": {
          "type": "string",
          "default": "",
          "description": "Custom API endpoint (for Ollama: http://localhost:11434, for Groq: https://api.groq.com/openai)"
        },
        "commitAi.temperature": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 2,
          "description": "AI temperature setting (0 = deterministic, 2 = very creative)"
        },
        "commitAi.professionalism": {
          "type": "string",
          "default": "standard",
          "description": "Professionalism level for commit messages",
          "enum": [
            "simple",
            "standard",
            "professional",
            "enterprise"
          ],
          "enumDescriptions": [
            "Basic: fix bug, add feature, update docs",
            "Standard: fix: resolve login issue, feat: add user dashboard",
            "Professional: fix(auth): resolve login validation issue, feat(ui): add responsive user dashboard",
            "Enterprise: fix(auth)!: resolve critical login validation issue\n\nFixes security vulnerability in user authentication\n\nBREAKING CHANGE: requires password reset for all users"
          ]
        },
        "commitAi.showActivityBar": {
          "type": "boolean",
          "default": true,
          "description": "Show Auto Git Message icon in Activity Bar"
        }
      }
    },
    "menus": {
      "scm/title": [
        {
          "command": "commitAi.generateCommitMessage",
          "group": "navigation",
          "when": "scmProvider == git"
        }
      ],
      "scm/sourceControl": [
        {
          "command": "commitAi.generateCommitMessage",
          "group": "inline",
          "when": "scmProvider == git"
        }
      ]
    },
    "keybindings": [
      {
        "command": "commitAi.generateCommitMessage",
        "key": "ctrl+shift+g",
        "mac": "cmd+shift+g",
        "when": "scmProvider == git"
      },
      {
        "command": "commitAi.showCommitHistory",
        "key": "ctrl+shift+h",
        "mac": "cmd+shift+h",
        "when": "scmProvider == git"
      },
      {
        "command": "commitAi.showFavoriteCommits",
        "key": "ctrl+shift+f",
        "mac": "cmd+shift+f",
        "when": "scmProvider == git"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "lint": "eslint src"
  },
  "devDependencies": {
    "@types/node": "22.x",
    "@types/vscode": "^1.104.0",
    "@types/webpack": "^5.28.5",
    "@typescript-eslint/eslint-plugin": "^8.42.0",
    "@typescript-eslint/parser": "^8.42.0",
    "eslint": "^9.34.0",
    "ts-loader": "^9.5.4",
    "typescript": "^5.9.2",
    "webpack": "^5.102.0",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.65.0",
    "@google/generative-ai": "^0.24.1",
    "openai": "^6.0.0"
  }
}
